* init-editor.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-editor.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
  ;;; init-editor.el ---   -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code :
#+end_src

** Emacs
#+begin_src emacs-lisp
  ;; A few more useful configurations
  (use-package emacs
    :ensure t
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)
    :config
    ;; Simplify confirm process
    (defalias 'yes-or-no-p 'y-or-n-p)
    )
#+end_src

** Beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :hook
    (after-init . beacon-mode)
    )
#+end_src

** Line Number
该块代码尚需优化，参考 =doom-emacs= 实现。
#+begin_src emacs-lisp
  ;; Show line number
  ;;(setq display-line-numbers-type 't)
  ;;(setq display-line-numbers 'absolute)
  (use-package display-line-numbers
    :ensure t
    :config
    (global-display-line-numbers-mode t)
    ;; line number align right
    :init
    (setq display-line-numbers-width-start t)
    )
#+end_src

** Comment
注释与反注释功能。
#+begin_src emacs-lisp
  (use-package newcomment
    :ensure nil
    :bind ([remap comment-dwim] . #'comment-or-uncomment)
    :config
    (defun comment-or-uncomment ()
      (interactive)
      (if (region-active-p)
          (comment-or-uncomment-region (region-beginning) (region-end))
        (if (save-excursion
              (beginning-of-line)
              (looking-at "\\s-*$"))
            (call-interactively 'comment-dwim)
          (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))
    :custom
    (comment-auto-fill-only-comments t))
#+end_src

** Htmlize
提供代码形成 HTML 格式并保留代码高亮，使用 =htmlize-region-for-paste= 可提供 emacs 到富文本编辑器的高亮。
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t
    :defer t)
#+end_src
** Ends
#+begin_src emacs-lisp
  (provide 'init-editor)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-editor.el ends here
#+end_src

