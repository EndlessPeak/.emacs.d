* init-lang.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-lang.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
  ;;; init-lang.el ---   -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code :
  (require 'init-variable)
#+end_src

** Dependency
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :defer t)
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure nil
    ;;:hook (after-init . global-flycheck-mode)
    )
#+end_src

** LSP Mode
如使用 =cape= 和 =corfu= 代替 =company= ，则最后的重置 ~company-backends~ 略过。
目前仍然使用 =company= ，因此还需配置。
设置 =LSP Mode= 默认不加载。
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer t
    :hook
    (;;(prog-mode . (lambda ()
     ;;               ;; Ask lsp mode load
     ;;               (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
     ;;                 (lsp-deferred))))
     (lsp-mode . (lambda ()
                   ;; Intergrate `which-key'
                   (lsp-enable-which-key-intergration)

                   ;; Format and organize imports
                   (when (and leesin-lsp-format-on-save
                              (not (apply #'derived-mode-p leesin-lsp-format-on-save-ignore-modes)))
                     (add-hook 'before-save-hook #'lsp-format-buffer t t)
                     (add-hook 'before-save-hook #'lsp-organize-imports t t))))
     )
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-prefer-flymake nil)
    (setq lsp-prefer-capf t)
    (setq lsp-enable-snippet t)
    (setq lsp-enable-completion-at-point t)
    (setq lsp-keep-workspace-alive nil)
    (setq lsp-enable-file-watchers nil)
    (setq lsp-enable-semantic-highlighting nil)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-text-document-color nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-indentation nil)
    (setq lsp-enable-on-type-formatting nil)
    ;;Reset company backends
    ;;In this way can emacs show company-yasnippet
    ;;Refered from doom-emacs
    (add-hook 'lsp-completion-mode-hook (lambda ()
                                          (when lsp-completion-mode
                                            (set (make-local-variable 'company-backends)
                                                 (remq 'company-capf company-backends)))))
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-clients-clangd-args '("-j=3"
                                    "--background-index"))
    )
#+end_src

** LSP UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config (setq lsp-ui-flycheck-enable t)
    :commands lsp-ui-mode)
#+end_src

** Citre
先进的 =Ctags= 前端。
#+begin_src emacs-lisp
  (use-package citre
    :ensure t
    :defer t
    :commands citre-jump-back
    :functions xref-go-back
    :init
    (setq citre-auto-enable-citre-mode-modes '(prog-mode)
          citre-default-create-tags-file-location 'global-cache
          citre-use-project-root-when-creating-tags t
          citre-prompt-language-for-ctags-command t)

    (defun citre-jump+ ()
      "Jump to the definition of the symbol at point.
      Fallback to `xref-find-definitions'."
      (interactive)
      (condition-case _
          (citre-jump)
        (error (call-interactively #'xref-find-definitions))))

    (defun citre-jump-back+ ()
      "Go back to the position before last `citre-jump'.
      Fallback to `xref-go-back'."
      (interactive)
      (condition-case _
          (citre-jump-back)
        (error (if (fboundp #'xref-go-back)
                  (call-interactively #'xref-go-back)
                (call-interactively #'xref-pop-marker-stack)))))
    :config
    (with-eval-after-load 'cc-mode (require 'citre-lang-c))
    )
#+end_src

** Defer Load
#+begin_src emacs-lisp
  (with-eval-after-load 'cc-mode
    (require 'lang-cc))

  (with-eval-after-load 'json-mode
    (require 'lang-json))
#+end_src

** Ends
#+begin_src emacs-lisp
  (provide 'init-lang)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-lang.el ends here
#+end_src

